"""
Message schemas for message management.
"""

from pydantic import BaseModel, Field
from typing import Optional, List, Dict, Any
from datetime import datetime


class MessageCreate(BaseModel):
    """Schema for creating a new message."""
    
    conversation_id: str = Field(..., min_length=1, max_length=255, description="Conversation identifier")
    content: str = Field(..., min_length=1, description="Message content")
    response: Optional[str] = Field(None, description="Response content")
    source_agent: Optional[str] = Field(None, description="Source agent name")
    source_agent_response: Optional[str] = Field(None, description="Source agent response")
    agent_workflow: Optional[List[Dict[str, Any]]] = Field(None, description="Agent workflow steps")
    execution_time: Optional[int] = Field(None, description="Execution time in milliseconds")
    
    class Config:
        schema_extra = {
            "example": {
                "conversation_id": "conv-1234",
                "content": "What are the card machine fees?",
                "response": "Here is the answer with personality.",
                "source_agent": "KnowledgeAgent",
                "source_agent_response": "Text generated by the specialized agent.",
                "agent_workflow": [
                    {"agent": "RouterAgent", "decision": "KnowledgeAgent", "execution_time": 150},
                    {"agent": "KnowledgeAgent", "execution_time": 1200}
                ],
                "execution_time": 1350
            }
        }


class MessageResponse(BaseModel):
    """Schema for message response."""
    
    id: int = Field(..., description="Message ID")
    conversation_id: str = Field(..., description="Conversation identifier")
    content: str = Field(..., description="Message content")
    response: Optional[str] = Field(None, description="Response content")
    source_agent: Optional[str] = Field(None, description="Source agent name")
    source_agent_response: Optional[str] = Field(None, description="Source agent response")
    agent_workflow: Optional[List[Dict[str, Any]]] = Field(None, description="Agent workflow steps")
    created_at: datetime = Field(..., description="Creation timestamp")
    execution_time: Optional[int] = Field(None, description="Execution time in milliseconds")
    
    class Config:
        from_attributes = True
        schema_extra = {
            "example": {
                "id": 1,
                "conversation_id": "conv-1234",
                "content": "What are the card machine fees?",
                "response": "Here is the answer with personality.",
                "source_agent": "KnowledgeAgent",
                "source_agent_response": "Text generated by the specialized agent.",
                "agent_workflow": [
                    {"agent": "RouterAgent", "decision": "KnowledgeAgent", "execution_time": 150},
                    {"agent": "KnowledgeAgent", "execution_time": 1200}
                ],
                "created_at": "2025-08-07T14:32:12Z",
                "execution_time": 1350
            }
        }
