"""
Chat request and response schemas for the API endpoints.
"""

from pydantic import BaseModel, Field, validator
from typing import List, Optional
from datetime import datetime


class AgentWorkflowStep(BaseModel):
    """Schema for a single step in the agent workflow."""
    
    agent: str = Field(..., description="Name of the agent (RouterAgent, KnowledgeAgent, MathAgent)")
    decision: Optional[str] = Field(None, description="Decision made by the agent")
    execution_time: Optional[int] = Field(None, description="Execution time in milliseconds")
    
    class Config:
        schema_extra = {
            "example": {
                "agent": "RouterAgent",
                "decision": "KnowledgeAgent",
                "execution_time": 150
            }
        }


class ChatRequest(BaseModel):
    """Schema for chat request payload."""
    
    message: str = Field(..., min_length=1, max_length=2000, description="User message")
    user_id: str = Field(..., min_length=1, max_length=255, description="User identifier")
    conversation_id: str = Field(..., min_length=1, max_length=255, description="Conversation identifier")
    
    @validator('message')
    def sanitize_message(cls, v):
        """Sanitize message content to prevent injection attacks."""
        # Remove HTML tags
        import re
        v = re.sub(r'<[^>]+>', '', v)
        # Remove script tags
        v = re.sub(r'<script[^>]*>.*?</script>', '', v, flags=re.IGNORECASE | re.DOTALL)
        # Remove potentially dangerous patterns
        v = re.sub(r'javascript:', '', v, flags=re.IGNORECASE)
        v = re.sub(r'data:', '', v, flags=re.IGNORECASE)
        return v.strip()
    
    class Config:
        schema_extra = {
            "example": {
                "message": "What are the card machine fees?",
                "user_id": "client789",
                "conversation_id": "conv-1234"
            }
        }


class ChatResponse(BaseModel):
    """Schema for chat response payload."""
    
    response: str = Field(..., description="Main response to the user")
    source_agent_response: str = Field(..., description="Text generated by the specialized agent")
    agent_workflow: List[AgentWorkflowStep] = Field(..., description="List of agent workflow steps")
    conversation_id: str = Field(..., description="Conversation identifier")
    execution_time: int = Field(..., description="Total execution time in milliseconds")
    timestamp: datetime = Field(default_factory=datetime.utcnow, description="Response timestamp")
    
    class Config:
        schema_extra = {
            "example": {
                "response": "Here is the answer with personality.",
                "source_agent_response": "Text generated by the specialized agent.",
                "agent_workflow": [
                    {"agent": "RouterAgent", "decision": "KnowledgeAgent", "execution_time": 150},
                    {"agent": "KnowledgeAgent", "execution_time": 1200}
                ],
                "conversation_id": "conv-1234",
                "execution_time": 1350,
                "timestamp": "2025-08-07T14:32:12Z"
            }
        }
